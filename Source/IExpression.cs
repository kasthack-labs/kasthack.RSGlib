// RandomStringGenerator / RandomStringGenerator / IExpression.cs
// Written by kasthack
// ( 2013.09.21 )
using System.Collections.Generic;
using System.Text;
namespace RandomStringGenerator {
    public interface IExpression {
        /// <summary>
        /// Get output char[]
        /// </summary>
        /// <returns></returns>
        char[] GetChars();
        /// <summary>
        /// Get ascii as byte buffer
        /// </summary>
        /// <returns></returns>
        byte[] GetAsciiBytes();
        /// <summary>
        /// Get byte buffer 4 encoding
        /// </summary>
        /// <param name="enc"></param>
        /// <returns></returns>
        byte[] GetEncodingBytes( Encoding enc );
        /// <summary>
        /// Compute length for *Insert functions. Equals to byte length 4 ascii
        /// </summary>
        /// <param name="outputdata">pointer 4 storage</param>
        unsafe void GetInsertLength( ref int* outputdata );
        /// <summary>
        /// Get max space 4 GetInsertLength
        /// </summary>
        /// <returns></returns>
        int ComputeLengthDataSize();
        /// <summary>
        /// Paste expression result to buffer
        /// </summary>
        /// <param name="size">pointer to length data generated by ComputeLen</param>
        /// <param name="outputBuffer">buffer to paste data</param>
        unsafe void InsertAsciiBytes( ref int* size, ref byte* outputBuffer );
        /// <summary>
        /// Paste expression result to buffer
        /// </summary>
        /// <param name="size">pointer to length data generated by ComputeLen</param>
        /// <param name="outputBuffer">buffer to paste data</param>
        unsafe void InsertAsciiChars( ref int* size, ref char* outputBuffer );
    }
}