using System.Collections.Generic;
using System.Text;
namespace RandomStringGenerator
{
	public interface IExpression
	{
		/// <summary>
		/// Get output string
		/// </summary>
		/// <returns></returns>
		string GetString();
		/// <summary>
		/// Get output char[]
		/// </summary>
		/// <returns></returns>
		char[] GetChars();
		/// <summary>
		/// Get ascii as byte buffer
		/// </summary>
		/// <returns></returns>
		byte[] GetAsciiBytes();
		/// <summary>
		/// Get byte buffer 4 encoding
		/// </summary>
		/// <param name="enc"></param>
		/// <returns></returns>
		byte[] GetEncodingBytes(Encoding enc);
		/// <summary>
		/// Enum inner expressions
		/// </summary>
		/// <returns></returns>
		IEnumerable<byte[]> EnumAsciiBuffers();
		/// <summary>
		/// Enum inner expressions
		/// </summary>
		/// <returns></returns>
		IEnumerable<string> EnumStrings();
		/// <summary>
		/// Compute length for *Insert functions. Equals to byte length 4 ascii
		/// </summary>
		/// <param name="outputdata">pointer 4 storage</param>
		unsafe void ComputeStringLength(ref int* outputdata);
		/// <summary>
		/// Get max space 4 ComputeLen
		/// </summary>
		/// <returns></returns>
		int ComputeMaxLenForSize();
		/// <summary>
		/// Paste expression result to buffer
		/// </summary>
		/// <param name="Size">pointer to length data generated by ComputeLen</param>
		/// <param name="OutputBuffer">buffer to paste data</param>
		unsafe void GetAsciiBytesInsert(ref int* Size, ref byte* OutputBuffer);
		/// <summary>
		/// Paste expression result to buffer
		/// </summary>
		/// <param name="Size">pointer to length data generated by ComputeLen</param>
		/// <param name="OutputBuffer">buffer to paste data</param>
		unsafe void GetAsciiInsert(ref int* Size, ref char* OutputBuffer);
	}
}
